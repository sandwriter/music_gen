local n_gaussians = 2
local n_features = 5
local n_labels = 2


features = nn.Identity()()

z_mu = nn.Linear(n_features, n_labels * n_gaussians)(features)
z_sigma = nn.Linear(n_features, n_gaussians)(features)
z_alpha = nn.Linear(n_features, n_gaussians)(features)

alpha = nn.SoftMax()(z_alpha)
mu = nn.Reshape(n_labels, n_gaussians)(z_mu)
sigma = nn.Exp()(z_sigma)

labels = nn.Identity()()

l = {}

for i = 1, n_gaussians do
  z1 = nn.Select(3,i)(mu)
  z2 = nn.MulConstant(-1)(z1)
  d = nn.CAddTable()({z2, labels})
  sq = nn.Square()(d)
  s = nn.Sum(2)(sq)
  s = nn.MulConstant(-0.5)(s)
  sigma_select = nn.Select(2,i)(sigma)
  sigma_sq_inv = nn.Power(-2)(sigma_select)
  alpha_select = nn.Select(2,i)(alpha)
  mm = nn.CMulTable()({s, sigma_sq_inv})
  e = nn.Exp()(mm)
  sigma_mm = nn.Power(-n_labels)(sigma_select)
  r = nn.CMulTable()({e, sigma_mm, alpha_select})
  r = nn.MulConstant(math.pow((2 * math.pi), -0.5*n_labels))(r)
  l[#l + 1] = r
end

z3 = nn.CAddTable()(l)
z4 = nn.Log()(z3)
z5 = nn.MulConstant(-1)(z4)

m = nn.gModule({features, labels}, {z5, alpha, mu, sigma})

local MDN = {}

function MDN.mdn(num_component)
   input = nn.Identity()()
   
